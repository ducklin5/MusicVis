/*global p5 */
var s = function(p) {
	'use strict';
	var bg0, logo, mic, fft, filter, amplitude,
		system,
		spectrum, primary, secondary, tertiary, quaternary,
		logoComp, logoCnv,
		setBg, bg, circleComp, circle;
	//
	p.preload = function() {
		//preload a backgroun image
		bg0 = p.loadImage('space-mountain.jpg');
		// load logo image
		logo = p.loadImage('Owl_Circle2.png');
	};

	p.setup = function() {
		// define the canvas and set frame rate for speed
		p.createCanvas(p.windowWidth, p.windowHeight);
		p.frameRate(60);

		//set up mic
		filter = new p5.Filter();

		mic = new p5.AudioIn();
		// disconnect unfiltered noise,
		mic.disconnect();
		// and connect to filter
		mic.connect(filter);
		mic.start();

		fft = new p5.FFT(0.5, 8192);
		fft.setInput(filter);

		//get overall volume
		amplitude = new p5.Amplitude();
		amplitude.setInput(mic);

		//call all composites
		setBg(bg0);
		circleComp();
		logoComp(logo);
		primary = new polarSpectrum(25, 150, 10, p.PI, 0.2 * p.height - 10, 0.35 * p.height);
		secondary = new polarSpectrum(25, 150, 10, p.PI, 0.2 * p.height - 10, 0.4 * p.height);
		tertiary = new polarSpectrum(25, 150, 10, p.PI, 0.2 * p.height - 10, 0.45 * p.height);
		quaternary = new polarSpectrum(25, 150, 10, p.PI, 0.2 * p.height - 10, 0.5 * p.height);
		system = new ParticleSystem(p.createVector(p.width / 2, p.height / 2));

	};
	p.draw = function() {
		p.push();

		//filter
		filter.setType('bandpass');
		//filter.freq(40);
		filter.res(20);

		//Set background
		p.background(bg.get());

		//translate by sound
		var thePosX = fft.getEnergy('bass') * p.random(-0.1, 0.1);
		p.translate(thePosX, 0);

		//analyze and store the spectrum array
		spectrum = fft.analyze();

		//==Draw Particle System==//
		system.addParticle();
		system.run();

		//==Draw 4th Spectrum==//
		/*
		quaternary.color = ["rainbow", 0.85, 0.8];
		quaternary.thickness = 0;
		quaternary.style = 'bars';
		quaternary.draw(p.width / 2, p.height / 2);
		*/

		//==Draw 3rd Spectrum==//
		tertiary.color = ["rainbow", 1, 0.85];
		tertiary.thickness = 5;
		tertiary.angleOffset = -0.06;
		tertiary.style = 'bars';
		tertiary.draw(p.width / 2, p.height / 2);

		//==Draw 2nd Spectrum==//
		secondary.color = ["rainbow", 0.6, 0.9];
		secondary.thickness = 3;
		secondary.style = 'bars';
		tertiary.angleOffset = -0.03;
		secondary.draw(p.width / 2, p.height / 2);

		//==Draw 1st Spectrum==//
		primary.color = ["rainbow", 0.3, 1];
		primary.thickness = 2;
		primary.style = 'bars';
		primary.draw(p.width / 2, p.height / 2);

		p.translate(p.width / 2, p.height / 2);
		p.imageMode(p.CENTER);

		var theWidth = logoCnv.width + p.width * fft.getEnergy('bass') / 1000;
		//Show the "Circle" Layer
		p.image(circle, 0, 0, theWidth, theWidth);

		//show the "Logo" layer from the logoComp
		p.image(logoCnv, 0, 0, theWidth, theWidth);

		p.pop();
	};
	setBg = function(a) {
		var halfA = a.get(0, 0, a.width / 2, a.height);
		bg = p.createGraphics(p.windowWidth, p.windowHeight);
		bg.background(a);
		bg.scale(-1, 1);
		bg.image(halfA, -p.windowWidth, 0, p.windowWidth / 2, p.windowHeight);

	};
	logoComp = function(input) {
			logoCnv = p.createGraphics(0.4 * circle.height, 0.4 * circle.height);
			logoCnv.imageMode(p.CENTER);
			logoCnv.image(input, logoCnv.width / 2, logoCnv.height / 2, logoCnv.width - 30, logoCnv.width - 30);

		}
		//create the spectrum composite function
	circleComp = function() {
		//save surrent setting, ie stroke, strokewight, fill, etc.
		p.push();
		//=============//
		//Circle LAYER//
		//===========//
		//create a graphic called "Circle" same size as the canvas
		circle = p.createGraphics(p.width, p.height);

		//create a graphic called "_circle" to later be put in "circle"
		//  0.4 times the size of the canvas
		var _circle = p.createGraphics(0.4 * circle.height, 0.4 * circle.height);
		_circle.noStroke();
		_circle.fill("#fff");
		_circle.ellipse(_circle.width / 2, _circle.height / 2, _circle.height - 30, _circle.height - 30);
		//draw the actual ellipse in "_circle" -- 30px smaller than "_circle"

		//create a copy of the "_circle" graphic and call it "glow"
		var glow = _circle.get();
		glow.filter(p.BLUR, 200);

		//Put "_circle" and "glow" in "Cirlce" then blend them
		circle.imageMode(p.CENTER);
		circle.image(_circle, circle.width / 2, circle.height / 2);
		circle.blendMode(p.ADD);
		circle.image(glow, circle.width / 2, circle.height / 2);

		p.pop();
	}
	var Spectrum = function(minFreq, maxFreq, increment) {
		this.minFreq = minFreq;
		this.maxFreq = maxFreq;
		this.increment = increment;
		this.smoothing = 0;
		this.isPolar = false;
		this.isLinear = true;
		this.style = 'curve';
		this.color = ["rainbow", 1, 1];
		this.thickness = 2;
	}
	var polarSpectrum = function(minFreq, maxFreq, increment, angle, minRadi, maxRadi) {
		Spectrum.call(this, minFreq, maxFreq, increment);
		this.angle = angle;
		this.angleOffset = 0.0;
		this.minRadi = minRadi;
		this.maxRadi = maxRadi;
		this.mirror = true;
		this.isPolar = true;
		this.crdnts1 = [];
		this.crdnts2 = [];
	}
	polarSpectrum.prototype = Object.create(Spectrum.prototype);
	polarSpectrum.prototype.constructor = Spectrum;

	polarSpectrum.prototype.getPoints = function(xpos, ypos) {
		var theta, q = this.smoothing,
			r1, r2, x1, y1, x2, y2;
		this.crdnts1 = [];
		this.crdnts2 = [];
		for (var i = this.minFreq; i <= this.maxFreq; i += this.increment) {
			//devine angle between lines
			theta = p.map(i, this.minFreq, this.maxFreq, this.angle, 0) + p.HALF_PI + this.angleOffset;

			r1 = this.minRadi;
			x1 = r1 * p.cos(theta);
			y1 = r1 * p.sin(theta);


			r2 = this.minRadi + p.map(fft.getEnergy(i - q, i + q), 0, 255, 0, this.maxRadi - this.minRadi) + 1;
			x2 = r2 * p.cos(theta);
			y2 = r2 * p.sin(theta);

			this.crdnts1.push(p.createVector(x1, y1));
			this.crdnts2.push(p.createVector(x2, y2));
		}
	}
	polarSpectrum.prototype.display = function(xpos, ypos) {
		var hue, x1, y1, x2, y2, type;
		p.push();
		p.translate(xpos, ypos)
		p.colorMode(p.HSB, 1);
		p.strokeWeight(this.thickness);
		switch (this.style) {
			case 'points':
				p.beginShape(p.POINTS);
				break;
			case 'bars':
			case 'mixed':
				p.beginShape(p.LINES);
				break;
			case 'curve':
			case 'line':
			default:
				p.beginShape();
				break;
		}
		for (var i = 0; i <= this.crdnts1.length - 1; i++) {

			x1 = this.crdnts1[i].x;
			y1 = this.crdnts1[i].y;
			x2 = this.crdnts2[i].x;
			y2 = this.crdnts2[i].y;

			if (this.color[0] == "rainbow") {
				hue = p.map(i, 0, this.crdnts1.length, 0, 0.5);
			} else {
				hue = this.color[0];
			}
			p.stroke(hue, this.color[1], this.color[2]);
			p.fill(hue, this.color[1], this.color[2]);

			switch (this.style) {
				case 'bars':
					p.vertex(x1, y1);
					p.vertex(x2, y2);
					break;
				case 'curve':
					p.curveVertex(x2, y2);
					break;
				case 'points':
				case 'line':
				case 'mixed':
				default:
					p.vertex(x2, y2);
					break;
			}

		}
		if (this.mirror) {
			for (var i = this.crdnts1.length - 1; i >= 0; i--) {
				x1 = this.crdnts1[i].x;
				y1 = this.crdnts1[i].y;
				x2 = this.crdnts2[i].x;
				y2 = this.crdnts2[i].y;
				if (this.color[0] == "rainbow") {
					hue = p.map(i, 0, this.crdnts1.length, 1, 0.5);
				} else {
					hue = this.color[0];
				}
				p.stroke(hue, this.color[1], this.color[2]);
				switch (this.style) {
					case 'bars':
						p.vertex(-x1, y1);
						p.vertex(-x2, y2);
						break;
					case 'curve':
						p.curveVertex(-x2, y2);
						break;
					case 'points':
					case 'line':
					case 'mixed':
					default:
						p.vertex(-x2, y2);
						break;
				}

			}

		}
		if (this.style == 'line' || 'curve') {
			p.endShape(p.CLOSE);
		} else {
			p.endShape();
		};
		p.pop();
	}
	polarSpectrum.prototype.draw = function(xpos, ypos) {
		this.getPoints(xpos, ypos);
		this.display(xpos, ypos);
	}

	var ParticleSystem = function(position) {
		this.origin = position.copy();
		this.particles = [];
		this.addParticle = function() {
			for (var i = 0; i <= 1 + amplitude.getLevel() * 2; i++) {
				this.particles.push(new Particle(this.origin));
			}
		};
		this.run = function() {
			for (var i = this.particles.length - 1; i >= 0; i--) {
				this.particles[i].run();
				if (this.particles[i].isDead()) {
					this.particles.splice(i, 1);
				}
			}
		};

	};

	var Particle = function(position) {
		var randx = p.random(-3, 0);
		var randy = p.random(-3, 3);
		this.velocity = p.createVector(randx, randy);
		this.position = position.copy();
		this.lifespan = 200 + 250 * amplitude.getLevel();
		this.run = function() {
			this.update();
			this.display();
		};
		this.update = function() {
			var volx = fft.getEnergy('bass') * 0.1 * p.random(0, this.velocity.x * 3);
			var voly = fft.getEnergy('bass') * 0.1 * p.random(0, this.velocity.y * 3);
			var volVec = p.createVector(volx, voly);
			this.position.add(this.velocity);
			this.position.add(volVec);
			this.lifespan -= 4;
		};
		this.display = function() {
			p.noStroke;
			p.strokeWeight(0);
			p.fill(255, (this.lifespan) / 1.5);
			var size = p.map(this.lifespan, 80, 0, 0, 5);


			p.ellipse(this.position.x, this.position.y, 5 + size, 5 + size);

			p.ellipse(p.width - this.position.x, this.position.y, 5 + size, 5 + size)

		};
		this.isDead = function() {
			if (this.lifespan < 0) {
				return true;
			} else {
				return false;
			}
		};
	};
};
var myp5 = new p5(s);